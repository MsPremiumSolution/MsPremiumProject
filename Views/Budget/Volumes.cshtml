@model MSPremiumProject.ViewModels.VolumesViewModel

@{
    ViewData["Title"] = "Volumes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid mt-4">
    <form asp-action="Volumes" method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="PropostaId" />
        <input type="hidden" asp-for="QualidadeDoArId" />

        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Volumes</h1>
        </div>

        @if (TempData["MensagemSucesso"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["MensagemSucesso"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["MensagemErro"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["MensagemErro"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <div asp-validation-summary="All" class="alert alert-danger" role="alert"></div>

        <div class="card mb-4">
            <div class="card-body d-flex justify-content-around">
                <h5 class="mb-0">Volume total: <span id="volume-total">0,00</span> m³</h5>
                <h5 class="mb-0">Superfície total: <span id="superficie-total">0,00</span> m²</h5>
            </div>
        </div>

        <div id="volumes-container">
            @for (var i = 0; i < Model.Volumes.Count; i++)
            {
                <div class="card mb-3 volume-block">
                    <div class="card-body">
                        <div class="row align-items-end">
                            <!-- Coluna da Altura -->
                            <div class="col-md-3">
                                <h5>Altura @(i + 1)</h5>
                                <label class="form-label">Altura (m)</label>
                                <input type="number" step="0.01" class="form-control altura-input" asp-for="Volumes[i].Altura" oninput="calcularTotais()" />
                                <input type="hidden" asp-for="Volumes[i].Id" />
                            </div>

                            <!-- Coluna das Medidas -->
                            <div class="col-md-9">
                                <label class="form-label">Medidas - Largura e Comprimento (m)</label>
                                <div class="medidas-container">
                                    @for (var j = 0; j < Model.Volumes[i].Medidas.Count; j++)
                                    {
                                        <div class="input-group mb-2 medida-row">
                                            <input type="number" step="0.01" class="form-control largura-input" placeholder="Largura" asp-for="Volumes[i].Medidas[j].Largura" oninput="calcularTotais()" />
                                            <input type="number" step="0.01" class="form-control comprimento-input" placeholder="Comprimento" asp-for="Volumes[i].Medidas[j].Comprimento" oninput="calcularTotais()" />
                                            <button class="btn btn-outline-danger" type="button" onclick="removerMedida(this)">-</button>
                                            <input type="hidden" asp-for="Volumes[i].Medidas[j].Id" />
                                        </div>
                                    }
                                    <!-- Adicionar uma linha de medida em branco se não houver nenhuma -->
                                    @if (!Model.Volumes[i].Medidas.Any())
                                    {
                                        <div class="input-group mb-2 medida-row">
                                            <input type="number" step="0.01" class="form-control largura-input" placeholder="Largura" name="Volumes[@i].Medidas[0].Largura" oninput="calcularTotais()" />
                                            <input type="number" step="0.01" class="form-control comprimento-input" placeholder="Comprimento" name="Volumes[@i].Medidas[0].Comprimento" oninput="calcularTotais()" />
                                            <button class="btn btn-outline-danger" type="button" onclick="removerMedida(this)" style="display:none;">-</button>
                                            <input type="hidden" name="Volumes[@i].Medidas[0].Id" value="0" />
                                        </div>
                                    }
                                </div>
                                <button class="btn btn-outline-primary btn-sm" type="button" onclick="adicionarMedida(this, @i)">
                                    <i class="bi bi-plus-circle"></i> Adicionar Medida
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <button id="adicionar-altura-btn" class="btn btn-outline-dark mt-2" type="button">Adicionar altura</button>
        <div class="mt-4 text-end">
            <button type="submit" class="btn btn-primary px-4"><i class="bi bi-save me-2"></i>Guardar e continuar</button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Calcula os totais ao carregar a página com dados existentes
            calcularTotais();

            document.getElementById('adicionar-altura-btn').addEventListener('click', function () {
                const container = document.getElementById('volumes-container');
                const volumeIndex = container.getElementsByClassName('volume-block').length;

                const novoVolumeHtml = `
                    <div class="card mb-3 volume-block">
                        <div class="card-body">
                            <div class="row align-items-end">
                                <div class="col-md-3">
                                    <h5>Altura ${volumeIndex + 1}</h5>
                                    <label class="form-label">Altura (m)</label>
                                    <input type="number" step="0.01" class="form-control altura-input" name="Volumes[${volumeIndex}].Altura" oninput="calcularTotais()" />
                                    <input type="hidden" name="Volumes[${volumeIndex}].Id" value="0" />
                                </div>
                                <div class="col-md-9">
                                    <label class="form-label">Medidas - Largura e Comprimento (m)</label>
                                    <div class="medidas-container">
                                        <div class="input-group mb-2 medida-row">
                                            <input type="number" step="0.01" class="form-control largura-input" placeholder="Largura" name="Volumes[${volumeIndex}].Medidas[0].Largura" oninput="calcularTotais()" />
                                            <input type="number" step="0.01" class="form-control comprimento-input" placeholder="Comprimento" name="Volumes[${volumeIndex}].Medidas[0].Comprimento" oninput="calcularTotais()" />
                                            <button class="btn btn-outline-danger" type="button" onclick="removerMedida(this)" style="display:none;">-</button>
                                            <input type="hidden" name="Volumes[${volumeIndex}].Medidas[0].Id" value="0" />
                                        </div>
                                    </div>
                                    <button class="btn btn-outline-primary btn-sm" type="button" onclick="adicionarMedida(this, ${volumeIndex})">
                                        <i class="bi bi-plus-circle"></i> Adicionar Medida
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>`;

                container.insertAdjacentHTML('beforeend', novoVolumeHtml);
            });
        });

        function adicionarMedida(btn, volumeIndex) {
            const medidasContainer = btn.previousElementSibling;
            const medidaIndex = medidasContainer.getElementsByClassName('medida-row').length;
            const novaMedidaHtml = `
                <div class="input-group mb-2 medida-row">
                    <input type="number" step="0.01" class="form-control largura-input" placeholder="Largura" name="Volumes[${volumeIndex}].Medidas[${medidaIndex}].Largura" oninput="calcularTotais()" />
                    <input type="number" step="0.01" class="form-control comprimento-input" placeholder="Comprimento" name="Volumes[${volumeIndex}].Medidas[${medidaIndex}].Comprimento" oninput="calcularTotais()" />
                    <button class="btn btn-outline-danger" type="button" onclick="removerMedida(this)">-</button>
                    <input type="hidden" name="Volumes[${volumeIndex}].Medidas[${medidaIndex}].Id" value="0" />
                </div>`;
            medidasContainer.insertAdjacentHTML('beforeend', novaMedidaHtml);
        }

        function removerMedida(btn) {
            btn.closest('.medida-row').remove();
            calcularTotais();
        }

        function calcularTotais() {
            let volumeTotal = 0;
            let superficieTotal = 0;

            document.querySelectorAll('.volume-block').forEach(volumeBlock => {
                const alturaInput = volumeBlock.querySelector('.altura-input');
                const altura = parseFloat(alturaInput.value.replace(',', '.')) || 0;

                let superficieDoVolume = 0;
                volumeBlock.querySelectorAll('.medida-row').forEach(medidaRow => {
                    const larguraInput = medidaRow.querySelector('.largura-input');
                    const comprimentoInput = medidaRow.querySelector('.comprimento-input');

                    const largura = parseFloat(larguraInput.value.replace(',', '.')) || 0;
                    const comprimento = parseFloat(comprimentoInput.value.replace(',', '.')) || 0;

                    if(largura > 0 && comprimento > 0) {
                        superficieDoVolume += largura * comprimento;
                    }
                });

                superficieTotal += superficieDoVolume;
                if (altura > 0) {
                    volumeTotal += superficieDoVolume * altura;
                }
            });

            document.getElementById('volume-total').textContent = volumeTotal.toFixed(2).replace('.', ',');
            document.getElementById('superficie-total').textContent = superficieTotal.toFixed(2).replace('.', ',');
        }

    </script>
}